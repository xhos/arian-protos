services:
  db:
    image: postgres:17-alpine
    container_name: arian-postgres
    restart: unless-stopped
    ports:
      - '${DB_PORT}:${DB_PORT}'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost || exit 1']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  ariand:
    container_name: ariand
    image: ghcr.io/xhos/ariand:latest
    restart: unless-stopped
    ports:
      - '${API_INTERNAL_PORT}:${API_INTERNAL_PORT}'
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_STRING: 'postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSLMODE}'
      API_KEY: ${API_KEY}
      PORT: ${API_INTERNAL_PORT}
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${API_INTERNAL_PORT}/healthz']
      interval: 10s
      timeout: 5s
      retries: 5

  arian-parser:
    image: ghcr.io/xhos/arian-parser:latest
    container_name: arian-parser
    restart: unless-stopped
    depends_on:
      ariand:
        condition: service_healthy
    ports:
      - '25:25'
      - '587:587'
      - '${PARSER_HTTP_PORT:-8080}:8080'
    volumes:
      - ${TLS_CERT_PATH:-./certs}:/certs:ro
    environment:
      ARIAND_URL: grpc://ariand:${API_INTERNAL_PORT}
      API_KEY: ${API_KEY}
      SMTP_ADDR: ':25'
      SMTP_DOMAIN: ${SMTP_DOMAIN:-automata.xhos.dev}
      TLS_CERT: ${TLS_CERT:-/certs/fullchain.pem}
      TLS_KEY: ${TLS_KEY:-/certs/privkey.pem}
      HTTP_ADDR: ':8080'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
      interval: 10s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    depends_on:
      - arian-parser
      - ariand
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  postgres_data:
  caddy_data:
  caddy_config:
