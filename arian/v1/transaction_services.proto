syntax = "proto3";

package arian.v1;

import "arian/v1/common.proto";
import "arian/v1/enums.proto";
import "arian/v1/transaction.proto";
import "buf/validate/validate.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";

service TransactionService {
  rpc ListTransactions(ListTransactionsRequest) returns (ListTransactionsResponse);
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse);
  rpc UpdateTransaction(UpdateTransactionRequest) returns (UpdateTransactionResponse);
  rpc DeleteTransaction(DeleteTransactionRequest) returns (DeleteTransactionResponse);
  rpc BulkDeleteTransactions(BulkDeleteTransactionsRequest) returns (BulkDeleteTransactionsResponse);
  rpc CategorizeTransaction(CategorizeTransactionRequest) returns (CategorizeTransactionResponse);
  rpc SearchTransactions(SearchTransactionsRequest) returns (SearchTransactionsResponse);
  rpc GetTransactionsByAccount(GetTransactionsByAccountRequest) returns (GetTransactionsByAccountResponse);
  rpc GetUncategorizedTransactions(GetUncategorizedTransactionsRequest) returns (GetUncategorizedTransactionsResponse);
  rpc BulkCategorizeTransactions(BulkCategorizeTransactionsRequest) returns (BulkCategorizeTransactionsResponse);
  rpc GetTransactionCountByAccount(GetTransactionCountByAccountRequest) returns (GetTransactionCountByAccountResponse);
  rpc FindCandidateTransactions(FindCandidateTransactionsRequest) returns (FindCandidateTransactionsResponse);
  rpc IdentifyMerchant(IdentifyMerchantRequest) returns (IdentifyMerchantResponse);
  rpc SetTransactionReceipt(SetTransactionReceiptRequest) returns (SetTransactionReceiptResponse);
}

message ListTransactionsRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  optional int64 account_id = 2 [(buf.validate.field).int64.gt = 0];
  optional int32 limit = 3 [(buf.validate.field).int32 = {
    gte: 1,
    lte: 1000
  }];
  optional int32 offset = 4 [(buf.validate.field).int32.gte = 0];
  optional google.protobuf.Timestamp start_date = 5;
  optional google.protobuf.Timestamp end_date = 6;
  optional Cursor cursor = 7;
  optional google.type.Money amount_min = 8;
  optional google.type.Money amount_max = 9;
  optional TransactionDirection direction = 10 [(buf.validate.field).enum.defined_only = true];
  repeated int64 account_ids = 11 [(buf.validate.field).repeated = {
    max_items: 50
  }];
  repeated string categories = 12 [(buf.validate.field).repeated = {
    max_items: 20
  }];
  optional string merchant_query = 13 [(buf.validate.field).string.max_len = 200];
  optional string description_query = 14 [(buf.validate.field).string.max_len = 500];
  optional string currency = 15 [(buf.validate.field).string = {
    len: 3,
    pattern: "^[A-Z]{3}$"
  }];
  optional TimeOfDay time_of_day_start = 16;
  optional TimeOfDay time_of_day_end = 17;
}

message ListTransactionsResponse {
  repeated Transaction transactions = 1;
  int64 total_count = 2;
  optional Cursor next_cursor = 3;
}

message GetTransactionRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 id = 2 [(buf.validate.field).int64.gt = 0];
}

message GetTransactionResponse {
  Transaction transaction = 1;
}

message CreateTransactionRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 account_id = 2 [(buf.validate.field).int64.gt = 0];
  google.protobuf.Timestamp tx_date = 3;
  google.type.Money tx_amount = 4;
  TransactionDirection direction = 5 [(buf.validate.field).enum.defined_only = true];
  optional string description = 6 [(buf.validate.field).string.max_len = 500];
  optional string merchant = 7 [(buf.validate.field).string.max_len = 200];
  optional string user_notes = 8 [(buf.validate.field).string.max_len = 1000];
  optional int64 category_id = 9 [(buf.validate.field).int64.gt = 0];
  optional google.type.Money foreign_amount = 10;
  optional double exchange_rate = 11 [(buf.validate.field).double = {
    gt: 0,
    lt: 1000
  }];
}

message CreateTransactionResponse {
  Transaction transaction = 1;
}

message UpdateTransactionRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 id = 2 [(buf.validate.field).int64.gt = 0];
  google.protobuf.FieldMask update_mask = 3;

  optional google.protobuf.Timestamp tx_date = 4;
  optional google.type.Money tx_amount = 5;
  optional TransactionDirection direction = 6 [(buf.validate.field).enum.defined_only = true];
  optional string description = 7 [(buf.validate.field).string.max_len = 500];
  optional string merchant = 8 [(buf.validate.field).string.max_len = 200];
  optional string user_notes = 9 [(buf.validate.field).string.max_len = 1000];
  optional int64 category_id = 10 [(buf.validate.field).int64.gt = 0];
  optional google.type.Money foreign_amount = 11;
  optional double exchange_rate = 12 [(buf.validate.field).double = {
    gt: 0,
    lt: 1000
  }];
}

message UpdateTransactionResponse {
  Transaction transaction = 1;
}

message DeleteTransactionRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 id = 2 [(buf.validate.field).int64.gt = 0];
}

message DeleteTransactionResponse {
  int64 affected_rows = 1;
}

message CategorizeTransactionRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 transaction_id = 2 [(buf.validate.field).int64.gt = 0];
  int64 category_id = 3 [(buf.validate.field).int64.gt = 0];
}

message CategorizeTransactionResponse {
  Transaction transaction = 1;
}

message SearchTransactionsRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  string query = 2 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 500
  }];
  optional int64 account_id = 3 [(buf.validate.field).int64.gt = 0];
  optional int64 category_id = 4 [(buf.validate.field).int64.gt = 0];
  optional int32 limit = 5 [(buf.validate.field).int32 = {
    gte: 1,
    lte: 1000
  }];
  optional int32 offset = 6 [(buf.validate.field).int32.gte = 0];
}

message SearchTransactionsResponse {
  repeated TransactionWithScore transactions = 1;
  int64 total_count = 2;
}

message GetTransactionsByAccountRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 account_id = 2 [(buf.validate.field).int64.gt = 0];
  optional int32 limit = 3 [(buf.validate.field).int32 = {
    gte: 1,
    lte: 1000
  }];
  optional int32 offset = 4 [(buf.validate.field).int32.gte = 0];
  optional google.protobuf.Timestamp start_date = 5;
  optional google.protobuf.Timestamp end_date = 6;
  optional Cursor cursor = 7;
}

message GetTransactionsByAccountResponse {
  repeated Transaction transactions = 1;
  int64 total_count = 2;
  optional Cursor next_cursor = 3;
}

message GetUncategorizedTransactionsRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  optional int64 account_id = 2 [(buf.validate.field).int64.gt = 0];
  optional int32 limit = 3 [(buf.validate.field).int32 = {
    gte: 1,
    lte: 1000
  }];
  optional int32 offset = 4 [(buf.validate.field).int32.gte = 0];
  optional Cursor cursor = 5;
}

message GetUncategorizedTransactionsResponse {
  repeated Transaction transactions = 1;
  int64 total_count = 2;
  optional Cursor next_cursor = 3;
}

message BulkCategorizeTransactionsRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  repeated int64 transaction_ids = 2 [(buf.validate.field).repeated = {
    min_items: 1,
    max_items: 100
  }];
  int64 category_id = 3 [(buf.validate.field).int64.gt = 0];
}

message BulkCategorizeTransactionsResponse {
  int64 affected_rows = 1;
}

message BulkDeleteTransactionsRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  repeated int64 transaction_ids = 2 [(buf.validate.field).repeated = {
    min_items: 1,
    max_items: 100
  }];
}

message BulkDeleteTransactionsResponse {
  int64 affected_rows = 1;
}

message GetTransactionCountByAccountRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetTransactionCountByAccountResponse {
  repeated TransactionCountByAccount counts = 1;
}

message FindCandidateTransactionsRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  string merchant = 2 [(buf.validate.field).string = {
    min_len: 1,
    max_len: 200
  }];
  google.protobuf.Timestamp purchase_date = 3;
  google.type.Money total_amount = 4;
}

message FindCandidateTransactionsResponse {
  repeated TransactionWithScore candidates = 1;
}

message IdentifyMerchantRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  int64 transaction_id = 2 [(buf.validate.field).int64.gt = 0];
}

message IdentifyMerchantResponse {
  string merchant = 1;
}

message SetTransactionReceiptRequest {
  int64 transaction_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 receipt_id = 2 [(buf.validate.field).int64.gt = 0];
}

message SetTransactionReceiptResponse {
  int64 affected_rows = 1;
}
